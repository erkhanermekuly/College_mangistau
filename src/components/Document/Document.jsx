import React, { useEffect, useState, useRef } from "react";
import { useNavigate } from "react-router-dom";
import styles from "./Document.module.css";

export default function Document() {
  const [items, setItems] = useState([]);
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const [file, setFile] = useState(null);
  const [editingId, setEditingId] = useState(null);
  const inputRef = useRef(null);
  const navigate = useNavigate();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ localStorage
  useEffect(() => {
    const saved = localStorage.getItem("documents");
    if (saved) {
      setItems(JSON.parse(saved));
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  useEffect(() => {
    localStorage.setItem("documents", JSON.stringify(items));
  }, [items]);

  function resetForm() {
    setTitle("");
    setContent("");
    setFile(null);
    setEditingId(null);
    if (inputRef.current) inputRef.current.value = null;
  }

  async function handleSubmit(e) {
    e.preventDefault();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    if (file) {
      const allowed = [
        "application/pdf",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
      ];
      if (!allowed.includes(file.type)) {
        alert("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ PDF –∏–ª–∏ Word –¥–æ–∫—É–º–µ–Ω—Ç (.doc, .docx, .pdf)");
        return;
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ base64 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        const newItem = {
          id: editingId || Date.now(),
          title,
          content,
          fileName: file.name,
          fileUrl: reader.result,
          fileType: file.type,
        };
        saveItem(newItem);
      };
      reader.readAsDataURL(file);
    } else {
      const newItem = {
        id: editingId || Date.now(),
        title,
        content,
        fileName: null,
        fileUrl: null,
        fileType: null,
      };
      saveItem(newItem);
    }
  }

  function saveItem(newItem) {
    if (editingId) {
      setItems((prev) =>
        prev.map((it) => (it.id === editingId ? newItem : it))
      );
      alert("–î–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!");
    } else {
      setItems((prev) => [newItem, ...prev]);
      alert("–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!");
    }
    resetForm();
  }

  function handleEdit(item) {
    setEditingId(item.id);
    setTitle(item.title || "");
    setContent(item.content || "");
  }

  function handleDelete(id) {
    if (!window.confirm("–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç?")) return;
    setItems((prev) => prev.filter((it) => it.id !== id));
  }

  return (
    <div className={styles.wrap}>
      <button onClick={() => navigate("/admin")} className={styles.buttonBack}>
        ‚Üê
      </button>

      <div className={styles.left}>
        <h2>{editingId ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç" : "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"}</h2>

        <form
          onSubmit={handleSubmit}
          className={styles.form}
          encType="multipart/form-data"
        >
          <label>
            –ó–∞–≥–æ–ª–æ–≤–æ–∫
            <input
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              required
            />
          </label>

          <label>
            –û–ø–∏—Å–∞–Ω–∏–µ
            <textarea
              value={content}
              onChange={(e) => setContent(e.target.value)}
              required
            />
          </label>

          <label>
            –§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ (PDF / Word)
            <input
              ref={inputRef}
              type="file"
              accept=".pdf,.doc,.docx"
              onChange={(e) => setFile(e.target.files[0])}
            />
          </label>

          <div className={styles.actions}>
            <button type="submit" className={styles.save}>
              {editingId ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" : "–î–æ–±–∞–≤–∏—Ç—å"}
            </button>
            <button type="button" className={styles.cancel} onClick={resetForm}>
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
          </div>
        </form>
      </div>

      <div className={styles.right}>
        <h2>–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h2>
        {items.length === 0 && <div>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>}

        <div className={styles.grid}>
          {items.map((it) => (
            <div key={it.id} className={styles.card}>
              <div className={styles.info}>
                <h3 className={styles.itemTitle}>{it.title}</h3>
                <p className={styles.itemExcerpt}>{it.content}</p>

                {it.fileUrl && (
                  <a
                    href={it.fileUrl}
                    download={it.fileName}
                    className={styles.link}
                  >
                    üìÑ {it.fileName}
                  </a>
                )}

                <div className={styles.cardActions}>
                  <button
                    onClick={() => handleEdit(it)}
                    className={styles.edit}
                  >
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                  <button
                    onClick={() => handleDelete(it.id)}
                    className={styles.delete}
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
